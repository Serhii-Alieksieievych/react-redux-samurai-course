{"version":3,"sources":["Redux/auth-reducer.ts","components/Header/Header.module.css","reportWebVitals.js","Redux/redux-store.ts","assets/img/Opossums.jpg","assets/img/logo.jpg","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Navbar/Navbar.tsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","App.js","index.js","types/ApiTypes.ts","Redux/dialogs-reducer.ts","components/common/Preloader/Preloader.tsx","Redux/profile-reducer.ts","Redux/users-reducer.ts","api/api.ts","components/common/Preloader/Preloader.module.css","components/Navbar/Navbar.module.css"],"names":["SET_AUTH","SET_SMALL_AVATAR","TOGGLE_IS_FETCHING","LOGIN","HAD_ERR","LOGOUT","RESET_AUTH","SET_CAPTCHA_URL","setCaptchaUrl","captchaUrl","type","setAuthUserData","isLogged","id","email","login","data","setSmallAvatar","smallAvatarSRC","toggleIsFetching","isFetching","loginTC","formData","dispatch","a","AuthAPI","console","log","resultCode","ResultCodeEnum","Success","userId","checkAutorization","getCaptchaUrl","payload","messages","securityAPI","url","logoutTC","logout","getAuthStatus","then","ProfileAPI","getProfileData","photos","small","initialState","hadErr","authReducer","state","action","module","exports","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","usersPage","usersReducer","profilePage","profileReducer","dialogsPage","dialogsReducer","auth","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Header","className","classes","header","src","logo","alt","Preloader","size","color","userInfo","userInfoText","onClick","button","ava","userPhoto","to","HeaderContainer","this","props","React","Component","connect","Navbar","nav","item","link","News","Music","Settings","DialogsContainer","lazy","ProfileContainer","UsersContainer","Login","navigate","useNavigate","useState","isRedirectedToLogin","setIsRedirectedToLogin","isInicialized","setIsInicialized","useEffect","fallback","path","element","ReactDOM","render","StrictMode","document","getElementById","ResultCodeForCaptchaEnum","CHANGE_NEW_MESSAGE","REFRESH_DIALOGS","REFRESH_MESSAGES","SET_CURRENT_DIALOG","START_DELETING","END_DELETING","refreshDialogsAC","dialogs","newMessagesCount","startDeleting","endDeleting","refreshMessagesAC","changeNewMessage","text","currentDialog","dialogInDeletingProgressId","current–°ollocutorsName","currentMessage","items","totalCount","error","refreshDialogs","dialogsApi","getDialogs","getCountNewMessages","setMessageToSpam","dialog","refreshMessages","deleteMessage","setTimeout","restoreMessage","startNewDialogFromUsersPage","startChattngWithUser","find","setCurrentDialog","getMessages","getMessagesNewestThan","date","sendMessage","preloader","version","xmlns","width","height","viewBox","fill","d","attributeName","attributeType","dur","from","repeatCount","CHANGE_POST","ADD_POST","SET_PROFILE_INFO","SET_STATUS","TOGGLE_FETCHING","setStatus","status","addPost","changePost","updateProfileInfo","profileInfo","setProfileData","sendProfilePhoto","photo","sendPhoto","setProfile","getStatus","updateStatus","currentPostArea","postsArr","message","likesCount","newPost","length","FOLLOW","UNFOLLOW","SET_STATE","SET_CURRENT_PAGE","TOGGLE_FETCHING_STATUS","TOGGLE_FOLLOWING_STATUS","setState","users","setCurrentPage","page","currentPage","toggleFollowingStatus","getUsers","getState","UsersAPI","followTC","user","FollowAPI","followAxios","unfollowTC","unfollowAxios","pageSize","haveFollowingInProgress","map","followed","some","filter","instance","axios","create","withCredentials","baseURL","headers","get","response","post","delete","resp","put","FormData","append","input","password","rememberMe","captcha","body","checkIsMessageViewed","messageId"],"mappings":"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","file":"static/js/main.dd8c47c9.chunk.js","sourcesContent":["import { type } from \"os\";\nimport { AuthAPI, ProfileAPI, securityAPI } from \"../api/api\";\nimport { AppStateType } from \"./redux-store\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AuthFormDataType } from \"../types/AuthTypes\";\nimport { ResultCodeEnum } from \"../types/ApiTypes\";\nimport { Dispatch } from \"react\";\n\nconst SET_AUTH = 'SET_AUTH';\nconst SET_SMALL_AVATAR = 'SET_SMALL_AVATAR';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst LOGIN = 'LOGIN';\nconst HAD_ERR = 'HAD_ERR';\nconst LOGOUT = 'LOGOUT';\nconst RESET_AUTH = \"RESET_AUTH\";\nconst SET_CAPTCHA_URL = \"SET_CAPTCHA_URL\"\n\nexport type AuthInitialStateType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    smallAvatarSRC: string | null,\n    isLogged: boolean,\n    isFetching: boolean,\n    captchaUrl: string | null,\n    hadErr: boolean,\n    userId: null | number\n}\ntype SetCaptchaUrlType = {\n    type: typeof SET_CAPTCHA_URL,\n    captchaUrl: string\n}\ntype LoginType = { type: typeof LOGIN, userId: number }\ntype LogoutType = { type: typeof LOGOUT }\ntype HadErrType = { type: typeof HAD_ERR, payload: any }\ntype AuthUserDataType = {\n    isLogged: boolean,\n    id: null | number,\n    email: null | string,\n    login: null | string,\n}\ntype ResetAuthUserDataType = {\n    type: typeof RESET_AUTH,\n    data: AuthUserDataType,\n}\ntype SetAuthUserDataType = {\n    type: typeof SET_AUTH,\n    data: AuthUserDataType,\n}\ntype SetSmallAvatarType = {\n    type: typeof SET_SMALL_AVATAR,\n    data: {\n        smallAvatarSRC: string,\n    }\n}\ntype TogleIsFetchingType = {\n    type: typeof TOGGLE_IS_FETCHING,\n    data: {\n        isFetching: boolean,\n    }\n}\ntype ActionsTypes = TogleIsFetchingType | SetSmallAvatarType | SetAuthUserDataType\n    | ResetAuthUserDataType | HadErrType | LogoutType | LoginType | SetCaptchaUrlType\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes> \n\nconst setCaptchaUrl = (captchaUrl :string) :SetCaptchaUrlType => ({type: SET_CAPTCHA_URL, captchaUrl})\nexport const login = (userId :number) :LoginType => ({type: LOGIN, userId})\nexport const logout = () :LogoutType => ({ type: LOGOUT })\nconst hadErr = (payload :any) :HadErrType=> ({type: HAD_ERR, payload})\nconst resetAuthUserData = () :ResetAuthUserDataType => ({\n    type: RESET_AUTH,\n    data: {\n        isLogged: false,\n        id: null,\n        email: null,\n        login: null,\n    }\n})\nexport const setAuthUserData = (\n    isLogged: boolean,\n    id: number,\n    email: string,\n    login: string\n) :SetAuthUserDataType => ({\n    type: SET_AUTH,\n    data: {\n        isLogged,\n        id,\n        email,\n        login\n    }\n})\nexport const setSmallAvatar = (smallAvatarSRC: string) :SetSmallAvatarType => ({\n    type: SET_SMALL_AVATAR,\n    data: {\n        smallAvatarSRC,\n    }\n})\nexport const toggleIsFetching = (isFetching: boolean) :TogleIsFetchingType => ({\n    type: TOGGLE_IS_FETCHING,\n    data: {\n        isFetching,\n    }\n})\n\n\nexport const loginTC = (formData: AuthFormDataType) => async (dispatch: Dispatch<any>)=> {\n    const data = await AuthAPI.login(formData)\n    console.log(data)\n    if (data.resultCode === ResultCodeEnum.Success) {\n        dispatch(login(data.data.userId))\n        dispatch(checkAutorization())\n    } else if (data.resultCode === 10){\n        dispatch(getCaptchaUrl())\n    } else {\n        dispatch(hadErr(null))\n        return data.messages[0]\n    }\n}\nexport const getCaptchaUrl = () :ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl();\n    const captchaUrl = data.url;\n    dispatch(setCaptchaUrl(captchaUrl))\n}\nexport const logoutTC = () :ThunkType => async (dispatch) => {\n    const data = await AuthAPI.logout()\n    dispatch(resetAuthUserData())\n}\nexport const checkAutorization = (): ThunkType => (dispatch) => {\n    return AuthAPI.getAuthStatus().then(data => {\n        const isLogged = data.resultCode === ResultCodeEnum.Success ? true : false;\n        const { id, login, email } = data.data;\n        if (isLogged) dispatch(setAuthUserData(isLogged, id, email, login))\n        return id;\n    }).then((id: number) => {\n        id && ProfileAPI.getProfileData(id).then(data => {\n            dispatch(setSmallAvatar(data.photos.small))\n            dispatch(toggleIsFetching(false))\n        })\n    })\n}\n\nconst initialState : AuthInitialStateType = {\n    id: null,\n    email: null,\n    login: null,\n    smallAvatarSRC: null,\n    isLogged: false,\n    isFetching: false,\n    captchaUrl: null,\n    hadErr: false,\n    userId: null,\n}\n\nconst authReducer = (state: AuthInitialStateType = initialState, action :any): AuthInitialStateType => {\n    switch (action.type) {\n        case SET_AUTH:\n            return {...state, ...action.data};\n        case RESET_AUTH:\n            return { ...state, ...action.data };\n        case TOGGLE_IS_FETCHING:\n            return {...state, ...action.data}\n        case SET_SMALL_AVATAR:\n            return { ...state, ...action.data };\n        case LOGIN:\n            return { ...state, userId: action.userId, hadErr: false }\n        case LOGOUT:\n            return { ...state, userId: null }\n        case HAD_ERR:\n            return { ...state, hadErr: true }\n        case SET_CAPTCHA_URL:\n            return { ...state, captchaUrl: action.captchaUrl}\n        default:\n            return state;\n    }\n}\n\nexport default authReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"preloader\":\"Header_preloader__2pZ6N\",\"userInfo\":\"Header_userInfo__31k6a\",\"userInfoText\":\"Header_userInfoText__3S9Ug\",\"ava\":\"Header_ava__1jVPU\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux';\nimport profileReducer from './profile-reducer';\nimport dialogsReducer from './dialogs-reducer';\nimport usersReducer from './users-reducer';\nimport authReducer from './auth-reducer';\nimport { reducer as formReducer } from 'redux-form';\nimport thunkMiddleware from 'redux-thunk';\n\nlet rootReducer = combineReducers({\n    usersPage: usersReducer,\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    auth: authReducer,\n    form: formReducer,\n})\n\ntype RootReducerType = typeof rootReducer;\nexport type AppStateType = ReturnType<RootReducerType>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\nexport default store;","export default __webpack_public_path__ + \"static/media/Opossums.160979c6.jpg\";","export default __webpack_public_path__ + \"static/media/logo.de04d02f.jpg\";","import React from \"react\";\nimport classes from './Header.module.css';\nimport userPhoto from \"../../assets/img/Opossums.jpg\";\nimport { Link } from \"react-router-dom\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport logo from \"../../assets/img/logo.jpg\"\n\ntype PropsType = {\n    email: string | null,\n    id: number | null,\n    smallAvatarSRC: string | null,\n    isFetching: boolean,\n    logoutTC: ()=>void\n}\n\nconst Header :React.FC<PropsType> = ({ email, id, smallAvatarSRC, isFetching, logoutTC }) => {\n    return (\n        <header className={classes.header}>\n            <img src={logo} alt=\"logo\" className=\"logo\" />\n            {isFetching ? <Preloader size=\"50\" color=\"black\"/> : id\n                ? <div className={classes.userInfo}>\n                    <div className={classes.userInfoText}>\n                        <span>You are logged</span>\n                        <span>{email}</span>\n                    </div>\n                    <button onClick={() => { logoutTC() }} className={classes.button}>Log out</button>\n                    {smallAvatarSRC\n                        ? <img src={smallAvatarSRC} alt=\"small_avatar\" className={classes.ava} />\n                        : <img src={userPhoto} alt=\"small_avatar\" className={classes.ava} />}\n                </div>\n                : <Link to=\"login\" className={classes.button}>Log in</Link>}\n        </header>\n    )\n}\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    setAuthUserData,\n    setSmallAvatar,\n    toggleIsFetching,\n    logoutTC,\n    AuthInitialStateType,\n} from \"../../Redux/auth-reducer\";\nimport Header from \"./Header\";\nimport { checkAutorization } from \"../../Redux/auth-reducer\";\nimport { AppStateType } from \"../../Redux/redux-store\";\n\ntype HeaderContainerPropsTypes = {\n    toggleIsFetching: (isFetching: boolean) => void;\n    checkAutorization: () => void;\n    setAuthUserData: (\n        isLogged: boolean,\n        id: number,\n        email: string,\n        login: string\n    ) => any,\n    setSmallAvatar: (smallAvatarSRC: string) => any,\n    logoutTC: () => Promise<void>,\n    email: string | null,\n    id: number | null,\n    smallAvatarSRC: string | null,\n    isFetching: boolean,\n}\n\nclass HeaderContainer extends React.Component<HeaderContainerPropsTypes>{\n    componentDidMount(){\n        this.props.toggleIsFetching(true)\n        this.props.checkAutorization()\n    }\n    render(){\n        return(\n            <Header \n                email = {this.props.email}\n                id = {this.props.id}\n                smallAvatarSRC = {this.props.smallAvatarSRC}\n                isFetching = {this.props.isFetching}\n                logoutTC = {this.props.logoutTC}      \n            />\n        )\n    }\n}\nconst mapStateToProps = (state: AppStateType) :AuthInitialStateType => (\n    {...state.auth}\n)\n    \n\nexport default connect(mapStateToProps,\n    {\n        setAuthUserData,\n        setSmallAvatar,\n        toggleIsFetching,\n        checkAutorization,\n        logoutTC,\n    }\n)(HeaderContainer);","import React from \"react\";\nimport classes from \"./Navbar.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n    return (\n        <nav className={classes.nav}>\n            <div className={classes.item}>\n                <Link\n                    to=\"profile/me\"\n                    className={classes.link}\n                >\n                    Profile\n                </Link>\n            </div>\n            <div className={classes.item}>\n                <Link\n                    to=\"dialogs\"\n                    className={classes.link}\n                >\n                    Dialogs\n                </Link>\n            </div>\n            <div className={classes.item}>\n                <Link\n                    to=\"news\"\n                    className={classes.link}\n                >\n                    News\n                </Link>\n            </div>\n            <div className={classes.item}>\n                <Link\n                    to=\"music\"\n                    className={classes.link}\n                >\n                    Music\n                </Link>\n            </div>\n            <div className={classes.item}>\n                <Link\n                    to=\"users\"\n                    className={classes.link}\n                >\n                    Users\n                </Link>\n            </div>\n            <div className={classes.item}>\n                <Link\n                    to=\"settings\"\n                    className={classes.link}\n                >\n                    Settings\n                </Link>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport classes from './News.module.css';\n\nconst News = () => {\n    return (\n        <div>\n            News\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport classes from './Music.module.css';\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","import React from \"react\";\nimport classes from './Settings.module.css';\n\nconst Settings = () => {\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n\nexport default Settings;","import React, { Suspense, lazy } from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\n\nimport './App.css';\n\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Navbar from './components/Navbar/Navbar';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Grid } from 'svg-loaders-react';\nimport { checkAutorization } from './Redux/auth-reducer';\nimport { connect } from 'react-redux';\nconst DialogsContainer = lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = lazy(() => import('./components/Profile/ProfileContainer'));\nconst UsersContainer = lazy(() => import('./components/Users/UsersContainer'));\nconst Login = lazy(() => import('./components/Login/Login'));\n\nconst App = ({ checkAutorization, userId }) => {\n  const navigate = useNavigate();\n  const [isRedirectedToLogin, setIsRedirectedToLogin] = useState(false);\n  const [isInicialized, setIsInicialized] = useState(false)\n  useEffect(() => {\n    checkAutorization().then(() => {\n      setIsInicialized(true)\n    })\n  }, [userId])\n  if (!isInicialized) return <div className=\"appPreloader\" ><Grid /></div>\n  if (isInicialized && !userId && !isRedirectedToLogin) {\n    setIsRedirectedToLogin(true)\n    navigate(\"/login\")\n  }\n  return (\n    <div className=\"app-wrapper\">\n      <HeaderContainer />\n      <Navbar />\n      <div className=\"app-wrapper-content\">\n        <Suspense fallback={<Grid />}>\n        <Routes>\n          <Route\n            path=\"profile\"\n          >\n            <Route\n              path=\":userId\"\n              element={\n                <ProfileContainer />\n              }\n            />\n            <Route\n              path=\"me\"\n              element={\n                <ProfileContainer />\n              }\n            />\n          </Route>\n            <Route\n              path=\"/dialogs\"\n              element={\n                <DialogsContainer />\n              }\n            />\n          <Route\n            path=\"/users\"\n            element={\n              <UsersContainer />\n            }\n          />\n          <Route path=\"/news\" element={<News />} />\n          <Route path=\"/music\" element={<Music />} />\n          <Route path=\"/settings\" element={<Settings />} />\n          <Route path=\"/login\" element={<Login />} />\n        </Routes>\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  userId: state.auth.id,\n})\n\nexport default connect(mapStateToProps, { checkAutorization })(App);\n","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './Redux/redux-store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n    <BrowserRouter /*</React.StrictMode>basename={process.env.PUBLIC_URL}*/>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);      \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { strictEqual } from \"assert\";\nimport { DialogType, IMessageFromFilterByDateType, MessagesType, MessageType } from \"./DialogsTypes\";\nimport { ProfileInfoType } from \"./ProfileTypes\";\nimport { UserType } from \"./UsersTypes\"\n\nexport enum ResultCodeEnum {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCaptchaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport interface ICommonResponse{}\n\nexport interface ICommonResponseWithResultCode {\n    resultCode: ResultCodeEnum,\n    messages: Array<string | undefined>,\n}\n\n// GetUsersAPI\n\nexport interface IGetUsersResponse extends ICommonResponse {\n    data: {\n        items: Array<UserType>\n        totalCount: number\n    }\n}\n\nexport interface IGetUsersRequest {\n    count?: number,\n    page?: number,\n    term?: string,\n}\n\n//FollowAPI\n\nexport interface IFollowUnfollow extends ICommonResponseWithResultCode {\n    data: {}\n}\n\n//ProfileAPI\nexport interface IGetProfileDataRequest {\n    userId: number,\n}\n\nexport interface IGetProfileDataResponse extends ICommonResponse {\n    data: ProfileInfoType\n}\n\nexport interface ISetProfileDataResponse extends ICommonResponse {\n    data: {}\n}\n\nexport interface IGetStatusRequest {\n    userId: number;\n}\n\nexport interface IGetStatusResponse extends ICommonResponse {\n    data: string\n}\n\nexport interface ISetStatusResponse extends ICommonResponseWithResultCode {\n    data: {}\n}\n\nexport interface ISetPhotoResponse extends ICommonResponseWithResultCode {\n    data: {photos: { small: string, large: string }}\n}\n\n//SecurityAPI\n\nexport interface IGetCaptchaResponse extends ICommonResponse {\n    data: {url: string}\n}\n\n//AuthAPI\n\nexport interface ILoginResponse {\n    resultCode: ResultCodeEnum| ResultCodeForCaptchaEnum,\n    messages: Array <string>,\n    fieldsErrors: Array <string>,\n    data: {\n        userId: number\n    }\n}\nexport interface ILogoutResponse extends ICommonResponseWithResultCode {\n    data: {}\n}\n\nexport interface IGetAuthStatusResponse {\n    data: {\n        resultCode: ResultCodeEnum,\n        messages: Array<string | undefined>,\n        fieldsErrors: Array<string | undefined>,\n        data: {\n            id: number\n            email: string\n            login: string\n        }\n    }\n}\n\n//DialogsAPI\n\nexport interface IGetDialogsResponse extends ICommonResponse{\n    data: Array<DialogType>\n}\n\nexport interface IGetMessagesResponse extends ICommonResponse{\n    data: MessagesType\n} \n\nexport interface IStartChattngWithUserResponse extends ICommonResponseWithResultCode{\n    data: {}\n}\n\nexport interface ISendMessageResponse extends ICommonResponseWithResultCode{\n    data: {\n        message: MessageType,\n        fieldsErrors: Array<string>,\n    }\n}\n\nexport interface ICheckIsMessageViewedResponse extends ICommonResponse{\n    data: boolean;\n}\n\nexport interface ISetMessageToSpamResponse extends ICommonResponseWithResultCode{\n    data: {}\n}\n\nexport interface IDeleteMessageResponse extends ICommonResponseWithResultCode{\n    data: {}\n}\n\nexport interface IRestoreMessageResponse extends ICommonResponseWithResultCode{\n    data: {}\n}\n\nexport interface IGetMessagesNewestThanResponse extends ICommonResponse{\n    data: Array<IMessageFromFilterByDateType>\n}\n\nexport interface IGetCountNewMessagesResponse extends ICommonResponse{\n    data: number,\n}","import { Dispatch } from \"redux\";\nimport { dialogsApi } from \"../api/api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./redux-store\";\nimport { DialogType, MessagesType } from \"../types/DialogsTypes\";\n\nconst CHANGE_NEW_MESSAGE = 'CHANGE-NEW-MESSAGE';\nconst REFRESH_DIALOGS = 'REFRESH-DIALOGS';\nconst REFRESH_MESSAGES = 'REFRESH-MESSAGES';\nconst SET_CURRENT_DIALOG = 'SET-COLLOCUTORS-INFO';\nconst START_DELETING = 'START-DELETING';\nconst END_DELETING = 'END-DELETING';\n//const SET_NEW_MESSAGES_COUNT = 'SET-NEW-MESSAGES-COUNT';\n\ntype StartDeletingType = {type: typeof START_DELETING, id: number}\ntype EndDeletingType = {type: typeof END_DELETING}\ntype SetCurrentDialogType = {type: typeof SET_CURRENT_DIALOG, dialog :DialogType | undefined}\n//type SetNewMessagesCountType = {type: typeof SET_NEW_MESSAGES_COUNT, count:number}\ntype ChangeNewMessageType = { type: typeof CHANGE_NEW_MESSAGE, text: string }\ntype RefreshDialogsType = { type: typeof REFRESH_DIALOGS, dialogs: Array<DialogType>, newMessagesCount:number }\n\ntype RefreshMessagesType = { type: typeof REFRESH_MESSAGES, messages: MessagesType, newMessagesCount: number }\ntype ActionsTypes = StartDeletingType | EndDeletingType | ChangeNewMessageType | RefreshDialogsType | SetCurrentDialogType | RefreshMessagesType\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes> \n\nconst refreshDialogsAC  = (dialogs: DialogType[], newMessagesCount: number) :RefreshDialogsType => ({ type: REFRESH_DIALOGS, dialogs, newMessagesCount })\n\nexport const startDeleting = (id: number) :StartDeletingType => ({ type: START_DELETING, id: id})\nexport const endDeleting = () :EndDeletingType => ({ type: END_DELETING })\nconst refreshMessagesAC = (messages: MessagesType, newMessagesCount: number) :RefreshMessagesType=>({ type: REFRESH_MESSAGES, messages, newMessagesCount })\n\ntype InitialStateType = typeof initialState;\n\nexport const changeNewMessage = (text: string) :ChangeNewMessageType => (\n    { type: CHANGE_NEW_MESSAGE, text }\n)\n\n/*export const setNewMessagesCount = (count: number) :SetNewMessagesCountType => (\n    { type:SET_NEW_MESSAGES_COUNT, count }\n)*/\n\n\n\nconst initialState = {\n    dialogs: [] as Array<DialogType>,\n    currentDialog: null,\n    dialogInDeletingProgressId: null,\n    current–°ollocutorsName: null,\n    currentMessage: '',\n    messages: { items: [], totalCount: 0, error: null },\n    newMessagesCount: 0,\n};\n\nexport const refreshDialogs = () :ThunkType => async (dispatch):Promise<void> => {\n    let dialogs = await dialogsApi.getDialogs()\n    let newMessagesCount = await dialogsApi.getCountNewMessages()\n    dispatch(refreshDialogsAC(dialogs, newMessagesCount))\n}\n\n/*export const refreshNewMessagesCount = (): ThunkType => async (dispatch:Dispatch) :Promise<void> => {\n    let data = await dialogsApi.getCountNewMessages()\n    dispatch(setNewMessagesCount(data))\n}*/\n\nexport const setMessageToSpam = (id: number, dialog: DialogType): ThunkType => async (dispatch) : Promise<void> => {\n    let data =await dialogsApi.setMessageToSpam(id)\n    dispatch(refreshMessages(dialog))\n}\n\nexport const deleteMessage = (id: number, dialog: DialogType): ThunkType => async (dispatch) :Promise<void> => {\n    dispatch(startDeleting(id))\n    setTimeout(() => {\n        dispatch(endDeleting())\n    }, 3000);\n    let data = await dialogsApi.deleteMessage(id)\n    dispatch(refreshMessages(dialog))\n}\n\nexport const restoreMessage = (id: number, dialog: DialogType): ThunkType => async (dispatch) :Promise<void>=> {\n    const data = await dialogsApi.restoreMessage(id);\n    dispatch(refreshMessages(dialog))\n    dispatch(endDeleting())\n}\n\nexport const startNewDialogFromUsersPage = (id: number): ThunkType=> async (dispatch): Promise<void> => {\n    await dialogsApi.startChattngWithUser(id)\n    let data = await dialogsApi.getDialogs()\n    let dialog = await data.find((dialog: DialogType)=> dialog.id === id)\n    dispatch(setCurrentDialog(dialog))\n    dispatch(refreshDialogs())\n}\n\nexport const refreshMessages = (dialog: DialogType): ThunkType => async (dispatch):Promise<void> => {\n    dispatch(setCurrentDialog(dialog))\n    let messages = await dialogsApi.getMessages(dialog.id)\n    let newMessagesCount = await dialogsApi.getCountNewMessages()\n    await dispatch(refreshMessagesAC(messages, newMessagesCount))\n    dispatch(refreshDialogs())\n}\n\nexport const getMessagesNewestThan = (id: number, date: string): ThunkType => async (dispatch): Promise<void> => {\n    let data = await dialogsApi.getMessagesNewestThan(id, date)\n    let newMessagesCount = await dialogsApi.getCountNewMessages()\n    await dispatch({ type: REFRESH_MESSAGES, messages: { items: data, totalCount: 0, error: null }, newMessagesCount })\n}\n\nexport const sendMessage = (payload: Array<any>): ThunkType => async (dispatch) => {\n    let data = await dialogsApi.sendMessage(payload[0].id, payload[1])\n    await dialogsApi.startChattngWithUser(payload[0].id)\n    dispatch(refreshMessages(payload[0]))\n}\n\nconst setCurrentDialog=(dialog:DialogType | undefined) :SetCurrentDialogType => ({type: SET_CURRENT_DIALOG, dialog})\n\nconst dialogsReducer = (state :InitialStateType = initialState, action: any) :InitialStateType => {\n    switch (action.type) {\n        case START_DELETING:\n            return {...state, dialogInDeletingProgressId: action.id}\n        case END_DELETING:\n            return {...state, dialogInDeletingProgressId: null}\n        case REFRESH_DIALOGS:\n            return {...state, dialogs: action.dialogs, newMessagesCount: action.newMessagesCount}\n        case REFRESH_MESSAGES:\n            return { ...state, messages: action.messages, newMessagesCount: action.newMessagesCount}\n        case CHANGE_NEW_MESSAGE:\n            return {...state, currentMessage: action.text};\n        case SET_CURRENT_DIALOG:\n            return {...state, currentDialog: action.dialog}\n        /*case SET_NEW_MESSAGES_COUNT:\n            return {...state, newMessagesCount: action.count}*/\n        default: \n            return state;\n    }\n}\n\nexport default dialogsReducer;","import React from \"react\";\nimport classes from \"./Preloader.module.css\"\n\ntype PreloaderPropsType = {\n    size: string,\n    color: string,\n}\n\nconst Preloader: React.FC<PreloaderPropsType>  = ({ size = \"100\", color = \"#fff\" })=> {\n    return (\n        <div className={classes.preloader}>\n            <svg\n                version=\"1.1\"\n                id=\"L7\"\n                xmlns=\"http://www.w3.org/2000/svg\" \n                width={size}\n                height={size}\n                viewBox=\"0 0 100 100\"\n                enable-background=\"new 0 0 100 100\"\n            >\n                <path\n                    fill={color}\n                    d=\"M31.6,3.5C5.9,13.6-6.6,42.7,3.5,68.4c10.1,25.7,39.2,38.3,64.9,28.1l-3.1-7.9c-21.3,8.4-45.4-2-53.8-23.3\n                    c-8.4-21.3,2-45.4,23.3-53.8L31.6,3.5z\"\n                >\n                    <animateTransform\n                        attributeName=\"transform\"\n                        attributeType=\"XML\"\n                        type=\"rotate\"\n                        dur=\"2s\"\n                        from=\"0 50 50\"\n                        to=\"360 50 50\"\n                        repeatCount=\"indefinite\" />\n                </path>\n                <path\n                    fill={color}\n                    d=\"M42.3,39.6c5.7-4.3,13.9-3.1,18.1,2.7c4.3,5.7,3.1,13.9-2.7,18.1l4.1,5.5c8.8-6.5,10.6-19,4.1-27.7\n                        c-6.5-8.8-19-10.6-27.7-4.1L42.3,39.6z\"\n                >\n                    <animateTransform\n                        attributeName=\"transform\"\n                        attributeType=\"XML\"\n                        type=\"rotate\"\n                        dur=\"1s\"\n                        from=\"0 50 50\"\n                        to=\"-360 50 50\"\n                        repeatCount=\"indefinite\"\n                    />\n                </path>\n                <path\n                    fill={color}\n                    d=\"M82,35.7C74.1,18,53.4,10.1,35.7,18S10.1,46.6,18,64.3l7.6-3.4c-6-13.5,0-29.3,13.5-35.3s29.3,0,35.3,13.5\n                        L82,35.7z\"\n                >\n                    <animateTransform\n                        attributeName=\"transform\"\n                        attributeType=\"XML\"\n                        type=\"rotate\"\n                        dur=\"2s\"\n                        from=\"0 50 50\"\n                        to=\"360 50 50\"\n                        repeatCount=\"indefinite\" />\n                </path>\n            </svg>\n        </div>\n    )\n}\n\nexport default Preloader;","import { AuthAPI, ProfileAPI } from \"../api/api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./redux-store\";\nimport { ProfileInfoType } from \"../types/ProfileTypes\";\n\nconst CHANGE_POST = 'CHANGE-POST';\nconst ADD_POST = 'ADD-POST';\nconst SET_PROFILE_INFO = 'SET_PROFILE_INFO';\nconst SET_STATUS = 'SET_STATUS';\nconst TOGGLE_FETCHING = 'TOGGLE_FETCHING';\n\ntype SetStatusType = {type: typeof SET_STATUS, status: string}\ntype IsFetchingType = { type: typeof TOGGLE_FETCHING, isFetching: boolean}\ntype AddPostType = { type : typeof ADD_POST, text: string }\ntype ChangePostType = { type : typeof CHANGE_POST, text: string }\n\ntype SetProfileInfoType = { type: typeof SET_PROFILE_INFO, profileInfo: ProfileInfoType }\ntype ActionsTypes = SetStatusType | IsFetchingType | AddPostType | ChangePostType | SetProfileInfoType\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes> \n\n\nexport const setStatus = (status: string) :SetStatusType => ({type: SET_STATUS, status})\nexport const toggleFetching = (isFetching: boolean) :IsFetchingType => ({ type: TOGGLE_FETCHING, isFetching })\nexport const addPost = (text: string) :AddPostType => ({ type: ADD_POST, text })\nexport const changePost = (text: string) : ChangePostType=> ({\n    type: CHANGE_POST,\n    text: text,\n})\nexport const setProfileInfo = (profileInfo :ProfileInfoType) :SetProfileInfoType => ({type: SET_PROFILE_INFO, profileInfo})\n\nexport const updateProfileInfo = (profileInfo: ProfileInfoType) :ThunkType => async (dispatch)=> {\n    const response = await ProfileAPI.setProfileData(profileInfo)\n}\n\nexport const sendProfilePhoto = (photo : File, id : number) :ThunkType=> {\n    return async (dispatch) => {\n        //const avtorisationData = await AuthAPI.getAuthStatus();\n        const response = await ProfileAPI.sendPhoto(photo);\n        dispatch(setProfile(id))\n    }\n}\n\nexport const setProfile = (id: number): ThunkType => async (dispatch) => {\n    dispatch(toggleFetching(true))\n    const data = await ProfileAPI.getProfileData(id)\n    dispatch(setProfileInfo(data))\n}\n\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\n    const userId = id;\n    const status = await ProfileAPI.getStatus(userId)\n        dispatch(setStatus(status))\n}\n\nexport const updateStatus = (status: string): ThunkType  => async (dispatch) => {\n    const data = await ProfileAPI.updateStatus(status)\n    if (!data.resultCode) {\n    dispatch(setStatus(status))\n    }\n}\n\n\nconst initialState = {\n    currentPostArea: '',\n    profileInfo: {\n        isFetching: false,\n        data: null,\n    },\n    status: '',\n    postsArr: [\n        { id: 1, message: `post-opost`, likesCount: 0 },\n        { id: 2, message: `post-pos`, likesCount: 0 },\n        { id: 3, message: `post-opos`, likesCount: 0 },\n    ],\n}\n\nconst profileReducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case ADD_POST:\n            let newPost = {\n                id: state.postsArr.length + 1,\n                message: action.text,\n                likesCount: 0,\n            }\n            return {...state, postsArr: [...state.postsArr, newPost], currentPostArea: ''};\n        case CHANGE_POST:\n            return {...state, currentPostArea: action.text};\n        case SET_PROFILE_INFO:\n            return { ...state, profileInfo: { ...state.profileInfo, data: action.profileInfo, isFetching: false}};\n        case SET_STATUS:\n            return {...state, status: action.status};\n        case TOGGLE_FETCHING:\n            return { ...state, profileInfo: { ...state.profileInfo, isFetching: action.isFetching}};\n        default:\n            return state;\n    }\n}\n\nexport default profileReducer;","import { Dispatch } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { UsersAPI, FollowAPI } from \"../api/api\";\nimport { ResultCodeEnum } from \"../types/ApiTypes\";\nimport { UserType, SetCurrentPageType, ToggleFollowingStatusType } from \"../types/UsersTypes\";\nimport { AppStateType } from \"./redux-store\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_STATE = 'SET-STATE';\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst TOGGLE_FETCHING_STATUS = 'TOGGLE_FETCHING_STATUS';\nexport const TOGGLE_FOLLOWING_STATUS = 'TOGGLE_FOLLOWING_STATUS'\n\ntype InitialStateType = {\n    users: Array<UserType>,\n    totalCount: number,\n    pageSize: number,\n    currentPage: number,\n    isFetching: boolean,\n    haveFollowingInProgress: Array<number>,\n}\n\ntype ActionsTypes = FollowType | UnfollowType | SetStateType\n    | ToggleIsFetchingType | ToggleFollowingStatusType | SetCurrentPageType\n\ntype FollowType = { type: typeof FOLLOW, id: number }\ntype UnfollowType = { type: typeof UNFOLLOW, id: number }\ntype SetStateType = { type: typeof SET_STATE, users: Array<UserType>, totalCount: number }\ntype ToggleIsFetchingType = { type: typeof TOGGLE_FETCHING_STATUS, isFetching: boolean }\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes> \n\nexport const follow = (id: number) :FollowType => ({ type: FOLLOW, id: id })\nexport const unfollow = (id: number) :UnfollowType => ({ type: UNFOLLOW, id: id })\nexport const setState = (users: Array<UserType>, totalCount: number) :SetStateType=> (\n    { type: SET_STATE, users, totalCount }\n)\nexport const setCurrentPage = (page: number) :SetCurrentPageType => ({ type: SET_CURRENT_PAGE, currentPage: page })\nexport const toggleIsFetching = (isFetching: boolean) :ToggleIsFetchingType => (\n    { type: TOGGLE_FETCHING_STATUS, isFetching }\n)\nexport const toggleFollowingStatus = (id: number) :ToggleFollowingStatusType => ({ type: TOGGLE_FOLLOWING_STATUS, id })\n\nexport const getUsers = (currentPage = 1)\n    :ThunkType => async (dispatch: Dispatch<ActionsTypes>, getState: () => AppStateType) => {\n    dispatch(toggleIsFetching(true))\n    dispatch(setCurrentPage(currentPage))\n    const data = await UsersAPI.getUsers(currentPage)\n    dispatch(toggleIsFetching(false))\n    dispatch(setState(data.items, data.totalCount))\n};\nexport const followTC = (user: UserType) :ThunkType => async (dispatch) => {\n    await dispatch(toggleFollowingStatus(user.id))\n    const data = await FollowAPI.followAxios(user.id)\n    if (data.resultCode === ResultCodeEnum.Success) {\n        dispatch(follow(user.id))\n    }\n    dispatch(toggleFollowingStatus(user.id))\n}\nexport const unfollowTC = (user: UserType) :ThunkType => async (dispatch) => {\n    await dispatch(toggleFollowingStatus(user.id))\n    const data = await FollowAPI.unfollowAxios(user.id)\n    if (data.resultCode === 0) {\n        dispatch(unfollow(user.id))\n    }\n    dispatch(toggleFollowingStatus(user.id))\n}\n\nconst initialState = {\n    users: [],\n    totalCount: 0,\n    pageSize: 12,\n    currentPage: 1,\n    isFetching: false,\n    haveFollowingInProgress: [],\n}\n\nconst usersReducer = (state :InitialStateType = initialState, action: ActionsTypes) : InitialStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state, users: state.users.map((user: UserType) :UserType => {\n                    return user.id === action.id\n                        ? { ...user, followed: true }\n                        : { ...user };\n                })\n            };\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map((user: UserType): UserType => {\n                    return user.id === action.id\n                        ? { ...user, followed: false }\n                        : { ...user };\n                })\n            };\n\n        case SET_STATE:\n            return { ...state, users: [...action.users], totalCount: action.totalCount };\n        case SET_CURRENT_PAGE:\n            return { ...state, currentPage: action.currentPage }\n        case TOGGLE_FETCHING_STATUS:\n            return { ...state, isFetching: action.isFetching }\n        case TOGGLE_FOLLOWING_STATUS:\n            return state.haveFollowingInProgress.some((id :number) => id === action.id)\n                ? { ...state, haveFollowingInProgress: state.haveFollowingInProgress.filter(id => id !== action.id) }\n                : { ...state, haveFollowingInProgress: [...state.haveFollowingInProgress, action.id] }\n        default:\n            return state;\n    }\n}\n\nexport default usersReducer;","import axios from 'axios';\nimport {\n    IFollowUnfollow,\n    IGetAuthStatusResponse,\n    IGetCaptchaResponse,\n    IGetProfileDataRequest,\n    IGetProfileDataResponse,\n    IGetStatusRequest,\n    IGetStatusResponse,\n    IGetUsersRequest,\n    IGetUsersResponse,\n    ISetProfileDataResponse,\n    ISetStatusResponse,\n    ILoginResponse,\n    ILogoutResponse,\n    IGetDialogsResponse,\n    IGetMessagesResponse,\n    IStartChattngWithUserResponse,\n    ISendMessageResponse,\n    ICheckIsMessageViewedResponse,\n    ISetMessageToSpamResponse,\n    IDeleteMessageResponse,\n    IGetCountNewMessagesResponse,\n    IGetMessagesNewestThanResponse,\n    IRestoreMessageResponse,\n    ISetPhotoResponse,\n} from '../types/ApiTypes';\nimport { AuthFormDataType } from '../types/AuthTypes';\nimport { ProfileInfoType } from '../types/ProfileTypes';\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\n    headers: {\n        'API-KEY': '2684d674-512e-42f2-86c1-036ed91abbce'\n    }\n})\n\nexport const UsersAPI = {\n    getUsers(currentPage = 1, pageSize = 12) {\n        return instance.get<IGetUsersRequest,IGetUsersResponse>(\n            `users?page=${currentPage}&count=${pageSize}`,\n        ).then(response => {\n            return response.data\n        })\n    },\n}\n\nexport const FollowAPI = {\n    followAxios(id: number) {\n        return instance.post<IFollowUnfollow>(\n            `follow/${id}`,\n            {},\n        ).then(response => response.data)\n    },\n\n    unfollowAxios(id: number) {\n        return instance.delete<IFollowUnfollow>(\n            `follow/${id}`,\n        ).then(response => response.data)\n    }\n}\n\nexport const ProfileAPI = {\n    getProfileData(userId: number) {\n        return (\n            instance.get<IGetProfileDataRequest, IGetProfileDataResponse>(`/profile/${userId}`).then(resp => {\n                return resp.data\n            })\n        )\n    },\n    setProfileData(data: ProfileInfoType) {\n        return (\n            instance.put<ISetProfileDataResponse>(`/profile/`, data).then(resp => resp.data)\n        )\n    },\n    getStatus(userId: number) {\n        return (\n            instance.get<IGetStatusRequest, IGetStatusResponse>(`/profile/status/${userId}`).then(resp => resp.data)\n        )\n    },\n    updateStatus(status: string) {\n        return (\n            instance.put<ISetStatusResponse>(`/profile/status`, {\n                status: status,\n            }).then(resp => resp.data)\n        )\n    },\n    sendPhoto(photo: File) {\n        let formData = new FormData;\n        formData.append(\"image\", photo);\n        return(\n            instance.put<ISetPhotoResponse>(`/profile/photo`, formData).then(resp => {\n                return resp.data\n            })\n        )\n    }\n}\n\nexport const securityAPI = {\n    getCaptchaUrl(){\n        return(\n            instance.get<void, IGetCaptchaResponse>('/security/get-captcha-url').then(resp => resp.data)\n        )\n    }\n}\n\nexport const AuthAPI = {\n    login({ input, password, rememberMe, captcha = null}: AuthFormDataType) {\n        return instance.post<ILoginResponse>(\n            `/auth/login`,\n            {\n                email: input,\n                password,\n                rememberMe,\n                captcha,\n            },\n        ).then(resp=> resp.data)\n    },\n\n    logout() {\n        return instance.delete<ILogoutResponse>(\n            `/auth/login`,\n        ).then(response => response.data)\n    },\n\n    getAuthStatus() {\n        return (\n            axios.get<void, IGetAuthStatusResponse>(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\n                withCredentials: true\n            }).then(resp => {\n                return resp.data\n            })\n        )\n    }\n}\n export const dialogsApi = {\n    getDialogs: () => instance.get<void, IGetDialogsResponse>('/dialogs').then(resp => {\n        return resp.data\n    }),\n\n    getMessages(id: number){\n        return instance.get<{id:number}, IGetMessagesResponse>(`dialogs/${id}/messages`).then(resp => {\n            return resp.data\n        })\n    },\n    startChattngWithUser(id: number) {\n        return instance.put<IStartChattngWithUserResponse>(`dialogs/${id}`,{userId: id}).then(resp=>{\n            return resp.data\n        })\n    },\n    sendMessage(id: number, message: string){\n        return instance.post<ISendMessageResponse>(`dialogs/${id}/messages`,{body: message})\n            .then(resp => {\n                return resp.data\n            })\n    },\n    checkIsMessageViewed(messageId: number){\n        return instance.get<{messageId:number}, ICheckIsMessageViewedResponse>(`dialogs/messages/${messageId}/viewed`).then(resp => {\n            return resp.data\n        })\n    },\n    setMessageToSpam( messageId: number ){\n        return instance.post<ISetMessageToSpamResponse>(`dialogs/messages/${messageId}/spam`, { body: messageId }).then(resp => {\n            return resp.data\n        })\n    },\n    deleteMessage( messageId: number ){\n        return instance.delete<IDeleteMessageResponse>(\n            `dialogs/messages/${messageId}`,\n        ).then(resp => {\n            return resp.data\n        })\n    },\n    restoreMessage( messageId: number ){\n        return instance.put<IRestoreMessageResponse>(\n            `dialogs/messages/${messageId}/restore`,\n            { messageId }\n        ).then(resp => {\n            console.log(resp.data)\n            return resp.data\n        })\n    },\n    getMessagesNewestThan( userId:number, date: string ){\n        return instance.get<{ userId: number, date: string }, IGetMessagesNewestThanResponse>(`dialogs/${userId}/messages/new?newerThen=${date}`).then(resp => {\n            return resp.data\n        })\n    },\n    getCountNewMessages(){\n        return instance.get<void, IGetCountNewMessagesResponse>(`dialogs/messages/new/count`).then(resp => {\n            return resp.data\n        })\n    }\n\n }\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2dvkO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"link\":\"Navbar_link__TNvz9\",\"activeLink\":\"Navbar_activeLink__3etBE\"};"],"sourceRoot":""}