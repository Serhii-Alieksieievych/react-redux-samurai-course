{"version":3,"sources":["hoc/withAuthRedirect.jsx","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["withAuthRedirect","Component","connect","state","userId","auth","id","props","replace","to","withBackAuthRedirect","module","exports","validate","values","errors","input","password","compose","hadErr","captchaUrl","loginTC","formik","useFormik","initialValues","rememberMe","captcha","onSubmit","alert","JSON","stringify","className","classes","login","handleSubmit","loginForm","error","htmlFor","type","getFieldProps","touched","src","alt"],"mappings":"oNAIaA,EAAmB,SAACC,GAK7B,OAAOC,aAJiB,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKC,MAGhBJ,EAAyB,SAACK,GAC7B,OAAKA,EAAMH,OACJ,cAACH,EAAD,eAAeM,IADI,cAAC,IAAD,CAAUC,SAAO,EAACC,GAAG,kBAK1CC,EAAuB,SAACT,GAKjC,OAAOC,aAJiB,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKC,MAGhBJ,EAAyB,SAACK,GAC7B,OAAIA,EAAMH,OAAe,cAAC,IAAD,CAAUI,SAAO,EAACC,GAAG,mBACvC,cAACR,EAAD,eAAeM,S,oBCrB9BI,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,yBAAyB,MAAQ,qBAAqB,aAAe,8B,6HCsB1HC,EAAW,SAACC,GACd,IAAMC,EAAwC,GAO9C,OANKD,EAAOE,QACRD,EAAOC,MAAQ,YAEdF,EAAOG,WACRF,EAAOE,SAAW,YAEfF,GAwEIG,sBAAQR,IAAsBR,aALrB,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKC,GACnBa,OAAQhB,EAAME,KAAKc,OACnBC,WAAYjB,EAAME,KAAKe,cAE2C,CAAEC,cAAzDH,EAnED,SAACX,GACX,IAAMe,EAASC,YAAU,CACrBC,cAAe,CACXR,MAAO,GACPC,SAAU,GACVQ,YAAY,EACZC,QAAS,MAEbb,WACAc,SAAU,SAAAb,GACNc,MAAMC,KAAKC,UAAUhB,EAAQ,KAAM,IACnCP,EAAMc,QAAQP,MAItB,OACI,qBAAKiB,UAAWC,IAAQC,MAAxB,SACI,uBAAMN,SAAUL,EAAOY,aAAcH,UAAWC,IAAQG,UAAxD,UACI,sBAAKJ,UAAWT,EAAOP,QAAUiB,IAAQI,MAAzC,UACI,uBAAOC,QAAQ,QAAf,mBACA,mCACI/B,GAAG,QACHgC,KAAK,QACDhB,EAAOiB,cAAc,WAE5BjB,EAAOkB,QAAQxB,OAASM,EAAOP,OAAOC,MACnC,8BAAMM,EAAOP,OAAOC,QACpB,KACJ,uBAAOqB,QAAQ,WAAf,sBACA,mCACI/B,GAAG,WACHgC,KAAK,YACDhB,EAAOiB,cAAc,cAE5BjB,EAAOkB,QAAQvB,UAAYK,EAAOP,OAAOE,SACtC,8BAAMK,EAAOP,OAAOE,WACpB,KACJ,uBAAOoB,QAAQ,aAAf,yBACA,mCACI/B,GAAG,aACHgC,KAAK,YACDhB,EAAOiB,cAAc,gBAE5BhC,EAAMa,YACA,gCACC,qBAAKqB,IAAKlC,EAAMa,WAAYsB,IAAI,YAChC,mCACIpC,GAAG,UACHgC,KAAK,QACDhB,EAAOiB,cAAc,gBAIpCjB,EAAOkB,QAAQd,SAAWJ,EAAOP,OAAOW,QACrC,8BAAMJ,EAAOP,OAAOW,UACpB,QAER,wBAAQY,KAAK,SAAb","file":"static/js/9.dcab34d6.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nexport const withAuthRedirect = (Component) => {\n    const mapStateToProps = (state) => ({\n        userId: state.auth.id,\n    })\n\n    return connect(mapStateToProps)((props) => {\n        if (!props.userId) return <Navigate replace to=\"/../login\" />\n        return <Component {...props} />\n    })\n}\n\nexport const withBackAuthRedirect = (Component) => {\n    const mapStateToProps = (state) => ({\n        userId: state.auth.id,\n    })\n\n    return connect(mapStateToProps)((props) => {\n        if (props.userId) return <Navigate replace to=\"/../profile/me\" />\n        return <Component {...props} />\n    })\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2Px22\",\"loginForm\":\"Login_loginForm__1Hg13\",\"error\":\"Login_error__17Wu6\",\"errorMessage\":\"Login_errorMessage__1EjD8\"};","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose, StateFromReducersMapObject } from \"redux\";\nimport { withBackAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { loginTC } from \"../../Redux/auth-reducer\";\nimport { CustomField } from \"../common/CustomForms/CustomForms\";\nimport classes from \"./Login.module.css\";\nimport { useState } from \"react\";\n\n//import * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\nimport { useFormik } from 'formik';\nimport { AuthFormDataType } from \"../../types/AuthTypes\";\nimport { AppStateType } from \"../../Redux/redux-store\";\n\ninterface OtherProps {\n    userId: number,\n    hadErr: boolean,\n    captchaUrl: string,\n    loginTC: (formData: AuthFormDataType) => Promise<any>,\n}\n\n\nconst validate = (values: AuthFormDataType) => {\n    const errors:FormikErrors<AuthFormDataType> = {};\n    if (!values.input) {\n        errors.input = 'Required';\n    }\n    if (!values.password) {\n        errors.password = 'Required';\n    }\n    return errors;\n};\n\n\n\nconst Login = (props:FormikProps<AuthFormDataType> & OtherProps) => {\n    const formik = useFormik({\n        initialValues: {\n            input: '',\n            password: '',\n            rememberMe: false,\n            captcha: null,\n        },\n        validate,\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n            props.loginTC(values)\n        },\n    });\n\n    return (\n        <div className={classes.login}>\n            <form onSubmit={formik.handleSubmit} className={classes.loginForm}>\n                <div className={formik.errors && classes.error}>\n                    <label htmlFor=\"login\">Login</label>\n                    <input\n                        id=\"input\"\n                        type=\"text\"\n                        {...formik.getFieldProps('input')}\n                    />\n                    {formik.touched.input && formik.errors.input ? (\n                        <div>{formik.errors.input}</div>\n                    ) : null}\n                    <label htmlFor=\"password\">Password</label>\n                    <input\n                        id=\"password\"\n                        type=\"password\"\n                        {...formik.getFieldProps('password')}\n                    />\n                    {formik.touched.password && formik.errors.password ? (\n                        <div>{formik.errors.password}</div>\n                    ) : null}\n                    <label htmlFor=\"rememberMe\">Remember me</label>\n                    <input\n                        id=\"rememberMe\"\n                        type=\"checkbox\"\n                        {...formik.getFieldProps('rememberMe')}\n                    />\n                    {props.captchaUrl\n                        && <div>\n                            <img src={props.captchaUrl} alt=\"captcha\" />\n                            <input\n                                id=\"captcha\"\n                                type=\"text\"\n                                {...formik.getFieldProps('captcha')}\n                            />\n                        </div>\n                    }\n                    {formik.touched.captcha && formik.errors.captcha ? (\n                        <div>{formik.errors.captcha}</div>\n                    ) : null}\n                </div>\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    );\n};\nconst mapStateToProps = (state: AppStateType) => ({\n    userId: state.auth.id,\n    hadErr: state.auth.hadErr,\n    captchaUrl: state.auth.captchaUrl,\n})\nexport default compose(withBackAuthRedirect, connect(mapStateToProps, { loginTC }))(Login);"],"sourceRoot":""}