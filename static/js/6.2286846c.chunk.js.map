{"version":3,"sources":["hoc/withAuthRedirect.jsx","components/common/CustomForms/CustomForms.tsx","utils/validators/validator.js","components/common/CustomForms/CustomForms.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogForm/DialogForm.jsx","components/Dialogs/Dialogs.jsx","Redux/dialogs-selectors.js","components/Dialogs/DialogsContainer.jsx"],"names":["withAuthRedirect","Component","connect","state","userId","auth","id","props","replace","to","withBackAuthRedirect","CustomField","input","meta","hasError","error","touched","className","classes","textareaWrapper","type","Input","Textarea","textarea","requiredField","value","undefined","maxLengthCreator","maxLength","length","module","exports","DialogItem","dialog","refreshMessages","dialogItem","onClick","userName","Message","message","myMessage","notMyMessage","body","addedAt","maxLengthValidate","DialogReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","placeholder","name","validate","Dialogs","sendMessage","dialogs","messages","refreshDialogs","currentDialog","useEffect","dialogsItems","map","src","photos","small","alt","lastUserActivityDate","items","data","getMessagesSelector","dialogsPage","getDialogsSelector","getCurrentMessageSelector","currentMessage","compose","dispatch","changeMessage","text","changeNewMessage"],"mappings":"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","file":"static/js/6.2286846c.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nexport const withAuthRedirect = (Component) => {\n    const mapStateToProps = (state) => ({\n        userId: state.auth.id,\n    })\n\n    return connect(mapStateToProps)((props) => {\n        if (!props.userId) return <Navigate replace to=\"/../login\" />\n        return <Component {...props} />\n    })\n}\n\nexport const withBackAuthRedirect = (Component) => {\n    const mapStateToProps = (state) => ({\n        userId: state.auth.id,\n    })\n\n    return connect(mapStateToProps)((props) => {\n        if (props.userId) return <Navigate replace to=\"/../profile/me\" />\n        return <Component {...props} />\n    })\n}","import React from \"react\";\nimport classes from \"./CustomForms.module.css\";\n\nexport const CustomField = ({ input, meta, ...props } :any) => {\n    const hasError = meta.error && meta.touched\n    return (\n        <div className={`${classes.textareaWrapper} ${hasError && classes.error}`}>\n            {input.type\n                ? <Input {...input} {...props} />\n                : <Textarea  {...input} {...props} />\n            }\n            <div>{hasError && <span>{meta.error}</span>}</div>\n        </div>\n    )\n}\n\nconst Textarea = (props :any) => (\n    <textarea {...props} className={classes.textarea}></textarea>\n)\n\nconst Input = (props :any) => (\n    <input {...props} className={classes.input}/>\n)"," export const requiredField = value => {\n    return value ? undefined : \"Field is required\";\n}\n\nexport const maxLengthCreator = maxLength => value => {\n    if (value) return value.length <= maxLength ? undefined : `Max lenhgth is ${maxLength}`\n    return undefined\n}\n\nexport const minLengthCreator = minLength => value => {\n    if (value) return value.length >= minLength ? undefined : `Min lenhgth is ${minLength}`\n    return undefined\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"CustomForms_error__1i_LA\",\"textarea\":\"CustomForms_textarea__24t2G\",\"input\":\"CustomForms_input__2n7gA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"form\":\"Dialogs_form__1EQXf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__2RuWv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\",\"myMessage\":\"Message_myMessage__6CULW\",\"notMyMessage\":\"Message_notMyMessage__2x8C6\",\"viewed\":\"Message_viewed__3WLTb\"};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { refreshMessages } from \"../../../Redux/dialogs-reducer\";\nimport classes from './DialogItem.module.css';\n\n\nconst DialogItem = ({dialog, refreshMessages}) => {\n    const clickHandler = () => {\n        refreshMessages(dialog)\n    }\n    //const path = '/dialogs/' + dialog.id;\n    return (\n        <div className={classes.dialogItem} onClick={clickHandler}>\n            {//<Link className={classes.dialogLink} to={path}>\n                dialog.userName\n            /*</Link>*/}\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from \"react\";\nimport classes from './Message.module.css';\n\nconst Message = ({message}) => {\n    return (\n        <div\n            className={\n                `${classes.message} ${message.userId ? classes.myMessage : classes.notMyMessage}`\n            }\n        >\n            Текст: {message.body}<br/>\n            Відправлено: {message.addedAt}\n        </div>\n    )\n}\n\nexport default Message;","import React from \"react\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { CustomField } from \"../../common/CustomForms/CustomForms\";\nimport classes from '../Dialogs.module.css';\nimport { maxLengthCreator } from \"../../../utils/validators/validator\";\n\nconst maxLengthValidate = maxLengthCreator(500);\n\nconst DialogForm = ({ handleSubmit }) => {\n    return (\n        <form onSubmit={handleSubmit} className={classes.form}>\n            <Field component={CustomField} placeholder=\"message\" name=\"message\" validate={[maxLengthValidate]}/>\n            <button>Відправити повідомлення</button>\n        </form>\n    )\n}\n\nconst DialogReduxForm = reduxForm({ form: 'dialog'})(DialogForm)\n\nexport default DialogReduxForm","import React, { useEffect } from \"react\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport classes from './Dialogs.module.css';\nimport DialogReduxForm from \"./DialogForm/DialogForm\";\n\nconst Dialogs = ({\n    sendMessage,\n    dialogs,\n    messages,\n    refreshDialogs,\n    refreshMessages,\n    currentDialog\n}) => {\n    useEffect(() => {\n        refreshDialogs()\n    }, [])\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogs.map(dialog=>{\n                    return <DialogItem key={dialog.id} dialog={dialog} refreshMessages={refreshMessages}/>\n                })}\n            </div>\n            <div className={classes.messages}>\n                <img src={currentDialog.photos.small && currentDialog.photos.small} alt=\"avatar\"/>\n                <h3>Name: {currentDialog.userName}</h3>\n                <p>Last user's activity date: {currentDialog.lastUserActivityDate}</p>\n                {messages.items.map(message => <Message\n                    key={message.id}\n                    message={message}\n                />)}\n            </div>\n            <DialogReduxForm onSubmit={(data)=>{\n                sendMessage([currentDialog, data.message])\n                data.message=''\n            }} />\n        </div>\n    )\n}\n\nexport default Dialogs;","export const getMessagesSelector = state => state.dialogsPage.messages;\nexport const getDialogsSelector = state => state.dialogsPage.dialogs;\nexport const getCurrentMessageSelector = state => state.dialogsPage.currentMessage;\n\n","import Dialogs from \"./Dialogs\";\nimport { changeNewMessage, refreshDialogs, refreshMessages, sendMessage } from \"../../Redux/dialogs-reducer\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { getCurrentMessageSelector, getDialogsSelector, getMessagesSelector } from \"../../Redux/dialogs-selectors\";\n\nconst mapStateToProps = (state) => (\n    {\n        messages: getMessagesSelector(state),\n        dialogs: getDialogsSelector(state),\n        currentMessage: getCurrentMessageSelector(state),\n        currentDialog: state.dialogsPage.currentDialog,\n    }\n)\n\nconst mapDispatchToProps = (dispatch) => (\n    {\n        sendMessage: (message) => {\n            dispatch(sendMessage(message));\n            //dispatch(changeNewMessage(''));\n        },\n\n        changeMessage: (text) => {\n            dispatch(changeNewMessage(text))\n        },\n\n        refreshDialogs: () => {\n            dispatch(refreshDialogs())\n        },\n\n        refreshMessages: (id) => {\n            dispatch(refreshMessages(id))\n        }\n    }\n)\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}